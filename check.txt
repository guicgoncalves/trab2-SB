Botei aqui algumas coisas do PDF que descrevem o trabalho.
Legenda:
    [----] -> não foi feito
    [++++] -> já foi feito

==========================
======== MONTADOR ========
==========================

Modifique o seu trabalho anterior para realizar um montador que consiga trabalhar com códigos em módulos. Para isso, duas novas diretivas são necessárias: BEGIN e END, conforme a Tabela 1.

O montador então deve receber de 1 a 3 programas de entrada, por argumento, um seguido do outro (ex.: ./montador prog1.asm prog2.asm prog3.asm).
    [++++]

Se um único programa foi colocado então o mesmo NÃO deve ter as diretivas BEGIN e END. Se 2 ou 3 programas são definidos pelo usuário como entrada então as diretivas BEGIN e END são obrigatórias. Este então é o único teste de erro que o montador deve fazer, todos os testes de erros, assim como a parte de MACROS, do trabalho anterior NÃO serão avaliados neste trabalho. A utilização de BEGIN e END deve seguir os slides de sala de aula.
    [----]

O montador deve então dar como saída de 1 a 3 arquivos objetos.
    [++++]

Em todos eles deve existir um cabeçalho com pelo menos as seguintes informações:
    nome do programa (pode ser o mesmo nome do arquivo) [++++]
    tamanho do código [++++]
    informação de realocação [++++]

O cabeçalho é identificado pela letra H, enquanto a letra T indica a parte do texto (código).
    [++++]

Além disso, se necessário o cabeçalho deve também incluir a TABELA DE USO e TABELA DE DEFINIÇÕES. O formato da inclusão dessa tabela é livre, ou seja, o grupo pode escolher como incluir ela no arquivo. Porém, deve estar claramente identificada pelo rótulo TU e TD especificamente. Ou seja, deve ter uma ou mais linhas com esse rótulo, como a informação na tabela é armazenada pode ser decidido pelo grupo.
    [++++]
    
Os arquivos de saída devem ser .o.
    [++++]
    
=========================
======== LIGADOR ========
=========================

Realizar um programa ligador.c que recebe de 1 a 3 arquivos de objeto. Os arquivos de objeto de entrada serão a saída do montador da parte anterior do seu próprio montador.
    [****]
    
A ordem de entrada dos programa define também a ordem que eles devem ser ligados.
    [****]
    
O ligador deve então realizar o processo de ligação e dar como saída um único arquivo, onde as informações de cabeçalho devem ser unicamente:
    nome do programa (pode ser o mesmo nome do primeiro arquivo objeto) [****]
    tamanho do código [----]
    informação de realocação [----]
    
O arquivo de saída não deve ter extensão.
    [----]
    
============================
======== CARREGADOR ========
============================

Realizar um programa carregador.c que recebe como entrada um arquivo de saída do ligador da seção anterior e depois uma sequência de números. Exemplo: ./carregador prog1 5 12 3 7 4.
    [----]
    
Inicialmente, este programa deve executar o código fazendo uma simulação (deve simular o código em funcionamento).
    [----]
    
Após simular o funcionamento do programa, o carregador deve gerar um arquivo de saída de imagem de memória. Para isso, são utilizados os números que foram inseriso junto com o nome do arquivo pelo usuário. Seguindo o exemplo anterior (./carregador prog1 3 12 3 7 100 150 280):
    O primeiro número indica a quantidade de CHUNKS de memória disponíveis neste momento, no caso 3.
        [----]
    Os próximos números indicam o tamanho em bytes de cada um desses chunks (no exemplo, 12, 3 e 7 bytes).
        [----]
    Os últimos números indicam o endereços inicial de cada chunk. O carregador então deve verificar se um desses chunks é suficiente para suportar o programa inteiro. Se não deve verificar se é possível então dividir o programa em diferentes chunks.
        [----]
    Caso não tenha como alocar o programa, mesmo dividindo, o carregador deve indicar uma mensagem de: "OUT OF MEMORY - YOUR PROGRAM WILL NOT BE LOADED".
        [----]
    Caso contrário, o carregador deve modificar a informação relativa para os endereços corretos e colocar o código final (sem cabeçalho) no arquivo de saída. O arquivo de saída deve ter extensão .im, e deve ter unicamente os códigos e valores que estariam em cada endereço de memória.
